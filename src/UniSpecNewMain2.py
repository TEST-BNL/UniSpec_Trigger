# -*- coding: utf-8 -*-"""Created on Tue Nov  4 09:07:59 2014@author: andyhueniModified by Andrew McMahon, BNL, 3/6/15"""from UniSpecRadiometer import Radiometerimport timeimport configparserimport os.pathimport serialimport sys#import WriteFile#import time_functions as tfsys.path.append('C:\Python34')sys.path.append('C:\Python34\Lib')sys.path.append('C:\Python34\DLLs')sys.path.append('C:\Python34\Lib\site-packages')WL = [None] * 2WL[0] = [None] * 256WL[1] = [None] * 256def WriteData(path, header, data, station):    #WL = [301.6, 305, 308.4, 311.7, 315.1, 318.5, 321.9, 325.3, 328.7, 332.1, 335.5, 338.8, 342.2, 345.6, 349, 352.4, 355.7, 359.1, 362.5, 365.9, 369.3, 372.6, 376, 379.4, 382.8, 386.2, 389.5, 392.9, 396.3, 399.7, 403, 406.4, 409.8, 413.1, 416.5, 419.9, 423.3, 426.6, 430, 433.4, 436.7, 440.1, 443.5, 446.8, 450.2, 453.6, 456.9, 460.3, 463.7, 467, 470.4, 473.8, 477.1, 480.5, 483.8, 487.2, 490.6, 493.9, 497.3, 500.6, 504, 507.4, 510.7, 514.1, 517.4, 520.8, 524.1, 527.5, 530.8, 534.2, 537.5, 540.9, 544.2, 547.6, 550.9, 554.3, 557.6, 561, 564.3, 567.7, 571, 574.4, 577.7, 581.1, 584.4, 587.8, 591.1, 594.4, 597.8, 601.1, 604.5, 607.8, 611.2, 614.5, 617.8, 621.2, 624.5, 627.9, 631.2, 634.5, 637.9, 641.2, 644.5, 647.9, 651.2, 654.5, 657.9, 661.2, 664.5, 667.9, 671.2, 674.5, 677.9, 681.2, 684.5, 687.8, 691.2, 694.5, 697.8, 701.1, 704.5, 707.8, 711.1, 714.4, 717.8, 721.1, 724.4, 727.7, 731.1, 734.4, 737.7, 741, 744.3, 747.7, 751, 754.3, 757.6, 760.9, 764.2, 767.5, 770.9, 774.2, 777.5, 780.8, 784.1, 787.4, 790.7, 794.1, 797.4, 800.7, 804, 807.3, 810.6, 813.9, 817.2, 820.5, 823.8, 827.1, 830.4, 833.7, 837, 840.3, 843.6, 847, 850.3, 853.6, 856.9, 860.2, 863.5, 866.8, 870.1, 873.3, 876.6, 879.9, 883.2, 886.5, 889.8, 893.1, 896.4, 899.7, 903, 906.3, 909.6, 912.9, 916.2, 919.5, 922.8, 926, 929.3, 932.6, 935.9, 939.2, 942.5, 945.8, 949.1, 952.3, 955.6, 958.9, 962.2, 965.5, 968.8, 972, 975.3, 978.6, 981.9, 985.2, 988.4, 991.7, 995, 998.3, 1001.5, 1004.8, 1008.1, 1011.4, 1014.6, 1017.9, 1021.2, 1024.5, 1027.7, 1031, 1034.3, 1037.6, 1040.8, 1044.1, 1047.4, 1050.6, 1053.9, 1057.2, 1060.4, 1063.7, 1067, 1070.2, 1073.5, 1076.8, 1080, 1083.3, 1086.6, 1089.8, 1093.1, 1096.3, 1099.6, 1102.9, 1106.1, 1109.4, 1112.6, 1115.9, 1119.2, 1122.4, 1125.7, 1128.9, 1132.2, 1135.4, 1138.7, 1141.9, 1145.2, 1148.4]        # open output file in appending mode    current_datetime = time.strftime("%Y-%m-%d__%H_%M_%S")    filename = 'Uni_' + current_datetime  + '_' + station + '.spu' #+ '_' + station    #station=path[:4]    path2 = path    print(station)    if (os.path.isfile(path2 + '/' + filename) == True) :        n = 0        exists = True        while (exists) :            n += 1            filename = filename + "_" + str(n)            exists = os.path.isfile(path2 + '/' + filename)        print("Writing file: " + filename)        fh = open(path2 + r'\\' + filename, "a")    # write file header    #fh.write('"File:    "' + data + r'\\' + filename + '"\n')     fh.write('"Remarks:    Data recorded directly to PC using python script 3-13-15"\n')     fh.write('"Time:    ' + time.strftime("%Y-%m-%d  %H:%M:%S") +  '"\n')     fh.write('"Limits_Ch_A:     ' + str(WL[1][0]) + ' - ' + str(WL[1][255]) + '\tLimits_Ch_B:     ' + str(WL[0][0]) + ' - ' + str(WL[0][247]) + '"\n')     fh.write('"Environment:    DegreesC=' + str(header.InstrumentTemperature) + ' BattV=' + str(header.BattV) + ' A1=' + str(header.A1) + ' A2=' + str(header.A2) + ' A3=' + str(header.A3) + ' A4=' + str(header.A4) + '"\n')     dmin_A = min(data[1][0:255])    dmax_A = max(data[1][0:255])    dmin_B = min(data[0][0:247])    dmax_B = max(data[0][0:247])    fh.write('"Minimum CH A:    ' + str(WL[1][data[1].index(dmin_A)]) + 'nm\t' + str(dmin_A) + '\tMinimum CH B:    ' + str(WL[0][data[0].index(dmin_B)]) + 'nm\t' + str(dmin_B) + '"\n')    fh.write('"Maximum CH A:    ' + str(WL[1][data[1].index(dmax_A)]) + 'nm\t' + str(dmax_A) + '\tMaximum CH B:    ' + str(WL[0][data[0].index(dmax_B)]) + 'nm\t' + str(dmax_B) + '"\n')    fh.write('"Integration:    ' + str(round(header.IntegrationTime/10, 3)) + ' ms"\n')     fh.write('"Number Scans:    ' + str(header.NoOfScansToAverage) + '"\n')     fh.write('"GPS:     LAT= Ukn     LON=Ukn     ALT=Ukn     Updated=Ukn"\n')    fh.write('"Station#: ' + station + '"\n')    fh.write('"Ch_B_WL    Ch_B_Value    Ch_A_WL    Ch_A_Value"\n')            print("CH B: " + str(len(data[0])) + " values\tCH A: " + str(len(data[1])) + " values\n")        i = 0    for i in range(0, 256) :        dat_out = str(WL[0][i]) + "\t" + str(data[0][i]) + "\t" + str(WL[1][i]) + "\t" + str(data[1][i]) + "\n"        fh.write(dat_out)        #print(dat_out)            fh.flush()    fh.close()    print("File Closed.")      path = str(os.path.realpath('.'))# read config fileprint('Reading config file: ' + path + r'\UniSpecConfig.txt')config = configparser.ConfigParser()config.read(path + r'\UniSpecConfig.txt')              s_set = config['StorageSettings']data_dir = s_set['DataDirectory']   site_info = config['SiteInfo']coeffs = config['Coeffs']A_Coeff = float(coeffs['A'])B_Coeff = float(coeffs['B'])C_Coeff = float(coeffs['C'])D_Coeff = float(coeffs['D'])E_Coeff = float(coeffs['E'])F_Coeff = float(coeffs['F'])trigger = config['Trigger']#Generate Wavelengthsfor i in range(1, 257) :    WL[1][i - 1] = round((C_Coeff*(i*i)) + (B_Coeff*i) + A_Coeff, 1)     WL[0][i - 1] = round((F_Coeff*(i*i)) + (E_Coeff*i) + D_Coeff, 1)     # configure RadiometerUSpec = Radiometer(path + r'\UniSpecConfig.txt')USpec.init()# Open trigger portserialTrigger = serial.Serial()serialTrigger.baudrate = trigger['Baud']serialTrigger.port = trigger['Port']serialTrigger.timeout = 60if (serialTrigger.isOpen() == False) :    serialTrigger.open() # collect datakeepRunning = Truescan_count = 0#for s in range(0,scan_count):while (keepRunning) :        print("\nWaiting for trigger")        datin = serialTrigger.readline()    datin2 = datin[-4:]    station = str(datin[:3])[2:5]    # print("Received: " + str(datin))    if (datin2 == b"GO!\n") :                print("Scan: " + str(scan_count))          trials = 0        failures = 0        while (trials <= 3) :            trials += 1            if (USpec.get_data()):  #if data is valid write to file                 data = [USpec.CHL2, USpec.CHL1]                                #WriteFile(path, USpec, data)                writepath = data_dir + r'\\' #+ time.strftime("%Y-%m-%d")  station +                 if not os.path.exists(writepath):                    os.makedirs(writepath)                                    WriteData(writepath, USpec, data, station)                                print("Data Saved.\n")                                scan_count += 1                #time.sleep(scan_interval)                serialTrigger.flush()                break            else :                print("Incomplete data, trying again (" + str(trials) + "/3)\n")                if (trials >= 3) :                    print ("Communication error, resetting UniSpec...")                                        USpec.init()                                        trials = 0                    failures += 1                    if (failures > 1) :                        print ("Communication failure! Restarting.\n")                        #fh.close()                        USpec.stop()                        del USpec                        time.sleep(1)                        USpec = Radiometer(path + r'\UniSpecConfig.txt')                        keepRunning = True  #CHANGE THIS TO FALSE TO STOP AFTER A FAILURE                        break                        elif (datin in (b"Q\n", b"Quit\n")) :        # Clean up        print("Data collection finished ... cleaning up and exiting.")        #fh.close()        USpec.stop()        keep = False        break